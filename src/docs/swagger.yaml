definitions:
  controllers.ChangePasswordReq:
    properties:
      loginType:
        type: string
      newPassword:
        type: string
      userEmail:
        type: string
    type: object
  controllers.CreateFeedbackRequest:
    properties:
      content:
        type: string
      rating:
        type: number
    type: object
  controllers.defaultBankAccountReq:
    properties:
      defaultAccountNumber:
        type: string
      defaultBank:
        type: string
    type: object
  models.BasicErrorRes:
    properties:
      error:
        type: string
    type: object
  models.BasicRes:
    properties:
      message:
        type: string
    type: object
  models.Booking:
    properties:
      SVCPID:
        type: string
      bookingID:
        type: string
      bookingTimestamp:
        type: string
      cancel:
        $ref: '#/definitions/models.BookingCancel'
      endTime:
        type: string
      feedback:
        $ref: '#/definitions/models.Feedback'
      serviceID:
        type: string
      serviceName:
        type: string
      startTime:
        type: string
      status:
        $ref: '#/definitions/models.BookingStatus'
      timeslotID:
        type: string
      totalBookingPrice:
        type: number
      userID:
        type: string
    type: object
  models.BookingBasicRes:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/models.Booking'
    type: object
  models.BookingCancel:
    properties:
      cancelBy:
        description: who cancelled
        type: string
      cancelReason:
        description: reason for cancellation
        type: string
      cancelStatus:
        description: true if cancelled
        type: boolean
      cancelTimestamp:
        description: time of cancellation
        type: string
    type: object
  models.BookingFull:
    properties:
      SVCPID:
        type: string
      SVCPName:
        type: string
      averageRating:
        type: number
      bookingID:
        type: string
      bookingTimestamp:
        type: string
      cancel:
        $ref: '#/definitions/models.BookingCancel'
      endTime:
        type: string
      feedback:
        $ref: '#/definitions/models.Feedback'
      serviceDescription:
        type: string
      serviceID:
        type: string
      serviceImg:
        items:
          type: integer
        type: array
      serviceName:
        description: service name
        type: string
      startTime:
        type: string
      status:
        $ref: '#/definitions/models.BookingStatus'
      timeslotID:
        type: string
      totalBookingPrice:
        type: number
      userID:
        type: string
    type: object
  models.BookingRequest:
    properties:
      serviceID:
        type: string
      timeslotID:
        type: string
    type: object
  models.BookingShowALL:
    properties:
      SVCPID:
        type: string
      SVCPName:
        type: string
      bookingID:
        type: string
      bookingTimestamp:
        type: string
      cancel:
        $ref: '#/definitions/models.BookingCancel'
      endTime:
        type: string
      feedback:
        $ref: '#/definitions/models.Feedback'
      serviceID:
        type: string
      serviceName:
        type: string
      startTime:
        type: string
      status:
        $ref: '#/definitions/models.BookingStatus'
      statusString:
        type: string
      timeslotID:
        type: string
      totalBookingPrice:
        type: number
      userID:
        type: string
    type: object
  models.BookingStatus:
    properties:
      paymentStatus:
        type: boolean
      paymentTimestamp:
        type: string
      rescheduleStatus:
        description: true if rescheduled
        type: boolean
      svcpCompleted:
        type: boolean
      svcpCompletedTimestamp:
        type: string
      svcpConfirmed:
        type: boolean
      svcpConfirmedTimestamp:
        type: string
      userCompleted:
        type: boolean
      userCompletedTimestamp:
        type: string
      userRefund:
        type: boolean
      userRefundTimestamp:
        type: string
    type: object
  models.BookingWithIdArrayRes:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/models.BookingShowALL'
        type: array
    type: object
  models.BookkingDetailRes:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/models.BookingFull'
    type: object
  models.Chat:
    properties:
      dateCreated:
        type: string
      messages:
        description: This is usually only part of the chat, not all
        items:
          $ref: '#/definitions/models.Message'
        type: array
      roomID:
        type: string
      user0ID:
        type: string
      user0Type:
        type: string
      user1ID:
        type: string
      user1Type:
        type: string
    type: object
  models.CreateAdmin:
    properties:
      email:
        type: string
      fullName:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.CreatePet:
    properties:
      age:
        type: integer
      behaviouralNotes:
        type: string
      breed:
        type: string
      certificate:
        type: string
      dietyPreferences:
        type: string
      gender:
        type: string
      healthInformation:
        type: string
      name:
        type: string
      type:
        type: string
      vaccinations:
        type: string
    type: object
  models.CreateSVCP:
    properties:
      SVCPEmail:
        type: string
      SVCPPassword:
        type: string
      SVCPServiceType:
        type: string
      SVCPUsername:
        description: Define the 10 fields here
        type: string
    type: object
  models.CreateService:
    properties:
      price:
        type: number
      serviceDescription:
        type: string
      serviceName:
        type: string
      serviceType:
        type: string
      timeslots:
        items:
          $ref: '#/definitions/models.CreateTimeslot'
        type: array
    type: object
  models.CreateTimeslot:
    properties:
      endTime:
        type: string
      startTime:
        type: string
    type: object
  models.CreateUser:
    properties:
      address:
        type: string
      dateOfBirth:
        type: string
      email:
        type: string
      fullName:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      username:
        description: Define the 10 fields here
        type: string
    type: object
  models.Feedback:
    properties:
      content:
        type: string
      feedbackID:
        type: string
      rating:
        type: number
    type: object
  models.LoginReq:
    properties:
      email:
        type: string
      logintype:
        type: string
      password:
        type: string
    type: object
  models.Message:
    properties:
      content:
        type: string
      messageType:
        type: string
      sender:
        type: integer
      timestamp:
        type: string
    type: object
  models.Pet:
    properties:
      age:
        type: integer
      behaviouralNotes:
        type: string
      breed:
        type: string
      certificate:
        type: string
      dietyPreferences:
        type: string
      gender:
        type: string
      healthInformation:
        type: string
      name:
        type: string
      ownerUsername:
        type: string
      type:
        type: string
      vaccinations:
        type: string
    type: object
  models.PromptpayQr:
    properties:
      qrImage:
        items:
          type: integer
        type: array
    type: object
  models.RequestBookingAll:
    properties:
      cancelStatus:
        type: integer
      paymentStatus:
        type: integer
      reservationType:
        type: string
      startAfter:
        type: string
      svcpCompleted:
        type: integer
      svcpConfirmed:
        type: integer
      userCompleted:
        type: integer
    type: object
  models.RequestBookingId:
    properties:
      bookingID:
        type: string
    type: object
  models.RequestBookingRescheduled:
    properties:
      bookingID:
        type: string
      timeslotID:
        type: string
    type: object
  models.RequestCancelBooking:
    properties:
      bookingID:
        type: string
      cancelReason:
        type: string
    type: object
  models.SVCP:
    properties:
      SVCPAdditionalImg:
        items:
          type: integer
        type: array
      SVCPEmail:
        type: string
      SVCPID:
        type: string
      SVCPImg:
        items:
          type: integer
        type: array
      SVCPPassword:
        type: string
      SVCPResponsiblePerson:
        type: string
      SVCPServiceType:
        type: string
      SVCPUsername:
        type: string
      address:
        type: string
      defaultAccountNumber:
        type: string
      defaultBank:
        type: string
      description:
        type: string
      individualID:
        type: string
      isVerified:
        type: boolean
      license:
        type: string
      phoneNumber:
        type: string
      services:
        items:
          $ref: '#/definitions/models.Service'
        type: array
    type: object
  models.SearchFilter:
    properties:
      address:
        type: string
      descending:
        type: boolean
      end_price_range:
        type: number
      end_time:
        type: string
      max_rating:
        type: number
      min_rating:
        type: number
      page_number:
        type: integer
      page_size:
        type: integer
      q:
        type: string
      services_type:
        type: string
      sort_by:
        description: price, rating, name
        type: string
      start_price_range:
        type: number
      start_time:
        type: string
    type: object
  models.SearchHistory:
    properties:
      date:
        type: string
      search_filters:
        $ref: '#/definitions/models.SearchFilter'
    type: object
  models.Service:
    properties:
      averageRating:
        type: number
      price:
        type: number
      requireCert:
        type: boolean
      serviceDescription:
        type: string
      serviceID:
        type: string
      serviceImg:
        items:
          type: integer
        type: array
      serviceName:
        type: string
      serviceType:
        type: string
      timeslots:
        items:
          $ref: '#/definitions/models.Timeslot'
        type: array
    type: object
  models.Timeslot:
    properties:
      endTime:
        type: string
      startTime:
        type: string
      status:
        type: string
      timeslotID:
        type: string
    type: object
  models.User:
    properties:
      address:
        type: string
      dateOfBirth:
        type: string
      defaultAccountNumber:
        type: string
      defaultBank:
        type: string
      email:
        type: string
      fullName:
        type: string
      id:
        type: string
      individualID:
        type: string
      password:
        type: string
      pets:
        items:
          $ref: '#/definitions/models.Pet'
        type: array
      phoneNumber:
        type: string
      profilePicture:
        items:
          type: integer
        type: array
      username:
        type: string
    type: object
  models.UserSearchHistory:
    properties:
      search_history:
        items:
          $ref: '#/definitions/models.SearchHistory'
        type: array
      user:
        $ref: '#/definitions/models.User'
    type: object
info:
  contact: {}
paths:
  /change-password:
    post:
      consumes:
      - application/json
      description: 'Change user password (login type : user, svcp, admin)'
      parameters:
      - description: Change password request
        in: body
        name: ChangePasswordReq
        required: true
        schema:
          $ref: '#/definitions/controllers.ChangePasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Change user password
      tags:
      - Authentication
  /chat/history:
    post:
      consumes:
      - application/json
      description: Create chat history of a room by roomId , user0Id , user1Id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Chat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Create chat history
      tags:
      - Chat
  /chat/history/:roomId:
    get:
      consumes:
      - application/json
      description: Get chat history of a room by roomId
      parameters:
      - description: Page number(default 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page(default 10)
        in: query
        name: per
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Chat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Get chat history
      tags:
      - Chat
    put:
      consumes:
      - application/json
      description: Update chat history of a room by roomId
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Chat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Update chat history
      tags:
      - Chat
  /current-entity:
    get:
      consumes:
      - application/json
      description: Get the current entity based on the provided context
      produces:
      - application/json
      responses:
        "200":
          description: Accepted
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get current entity
      tags:
      - Authentication
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and generate access token
      parameters:
      - description: login request
        in: body
        name: loginReq
        required: true
        schema:
          $ref: '#/definitions/models.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: User login
      tags:
      - Authentication
  /logout:
    post:
      description: Invalidate user session and clear access token
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            properties:
              message:
                type: string
            type: object
      summary: User logout
      tags:
      - Authentication
  /register-admin:
    post:
      consumes:
      - application/json
      description: Register a new admin
      parameters:
      - description: Admin registration data
        in: body
        name: admin_data
        required: true
        schema:
          $ref: '#/definitions/models.CreateAdmin'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            properties:
              ' token':
                type: string
              message:
                type: string
            type: object
        "400":
          description: Bad request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Admin registration
      tags:
      - Authentication
  /register-svcp:
    post:
      consumes:
      - application/json
      description: Register a new service provider
      parameters:
      - description: Service provider registration data
        in: body
        name: svcp_data
        required: true
        schema:
          $ref: '#/definitions/models.CreateSVCP'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            properties:
              ' token':
                type: string
              message:
                type: string
            type: object
        "400":
          description: Bad request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Service provider registration
      tags:
      - Authentication
  /register-user:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User registration data
        in: body
        name: user_data
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            properties:
              ' token':
                type: string
              message:
                type: string
            type: object
        "400":
          description: Bad request
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: User registration
      tags:
      - Authentication
  /service/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a service
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Service'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Delete a service
      tags:
      - Service
    get:
      consumes:
      - application/json
      description: Get a service
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Service'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Get a service
      tags:
      - Service
    patch:
      consumes:
      - application/json
      description: Update a service
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      - description: Service data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Service'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Update a service
      tags:
      - Service
  /service/booking/all/svcp:
    post:
      consumes:
      - application/json
      description: |-
        json body not required if you dont want to filter result
        startAfter is filter booking that has timeslot Start Before this time
        reservationType is checking booking is "incoming" or "outgoing"
        cancelStatus ,paymentStatus ,svcpConfirmed ,svcpCompleted ,userCompleted is filter booking with status 0 == false, 1 == true, 2 == dont care(or you can unuse this filed in json body)
        if dont want to filter that field dont use that field in json body
        filter is and-condition(&&)
        example {}
        example {"reservationType":"incoming","svcpCompleted": 1,"userCompleted": 0}
      parameters:
      - description: get all booking with filter(optional)
        in: body
        name: service
        schema:
          $ref: '#/definitions/models.RequestBookingAll'
      produces:
      - application/json
      responses:
        "200":
          description: get all svcp booking successfully
          schema:
            items:
              $ref: '#/definitions/models.BookingWithIdArrayRes'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: get all booking of svcp with filter(optional)
      tags:
      - Booking svcp
  /service/booking/all/user:
    post:
      consumes:
      - application/json
      description: |-
        json body not required if you dont want to filter result
        startAfter is filter booking that has timeslot Start Before this time
        reservationType is checking booking is "incoming" or "outgoing"
        cancelStatus ,paymentStatus ,svcpConfirmed ,svcpCompleted ,userCompleted is filter booking with status 0 == false, 1 == true, 2 == dont care(or you can unuse this filed in json body)
        if dont want to filter that field dont use that field in json body
        filter is and-condition(&&)
        example {}
        example {"reservationType":"incoming","svcpCompleted": 1,"userCompleted": 0}
      parameters:
      - description: get all booking with filter(optional)
        in: body
        name: service
        schema:
          $ref: '#/definitions/models.RequestBookingAll'
      produces:
      - application/json
      responses:
        "200":
          description: get all user booking successfully
          schema:
            items:
              $ref: '#/definitions/models.BookingWithIdArrayRes'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: get all booking of user with filter(optional)
      tags:
      - Booking user
  /service/booking/cancel/svcp:
    patch:
      consumes:
      - application/json
      description: can only cancel not completed by svcp booking and not cancelled
      parameters:
      - description: booking id
        in: body
        name: bookingID
        required: true
        schema:
          $ref: '#/definitions/models.RequestCancelBooking'
      produces:
      - application/json
      responses:
        "200":
          description: Booking cancelled successfully
          schema:
            $ref: '#/definitions/models.BookingBasicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: svcp cancel booking
      tags:
      - Booking svcp
  /service/booking/cancel/user:
    patch:
      consumes:
      - application/json
      description: can only cancel not completed by user booking and not cancelled
      parameters:
      - description: booking id
        in: body
        name: bookingID
        required: true
        schema:
          $ref: '#/definitions/models.RequestCancelBooking'
      produces:
      - application/json
      responses:
        "200":
          description: Booking cancelled successfully
          schema:
            $ref: '#/definitions/models.BookingBasicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: user cancel booking by booking id
      tags:
      - Booking user
  /service/booking/complete/svcp:
    patch:
      consumes:
      - application/json
      description: |-
        can only complete not completed booking by svcp ,not cancelled ,startime is pass
        if svcp not comfirmed booking it will auto comfirm first
      parameters:
      - description: booking id
        in: body
        name: bookingID
        required: true
        schema:
          $ref: '#/definitions/models.RequestBookingId'
      produces:
      - application/json
      responses:
        "200":
          description: Booking completed successfully
          schema:
            $ref: '#/definitions/models.BookingBasicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: set complete svcp for booking by booking id
      tags:
      - Booking svcp
  /service/booking/complete/user:
    patch:
      consumes:
      - application/json
      description: can only complete not completed booking by user ,not cancelled
        and startime is passed.
      parameters:
      - description: booking id
        in: body
        name: bookingID
        required: true
        schema:
          $ref: '#/definitions/models.RequestBookingId'
      produces:
      - application/json
      responses:
        "200":
          description: Booking completed successfully
          schema:
            $ref: '#/definitions/models.BookingBasicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: set complete user for booking by booking id
      tags:
      - Booking user
  /service/booking/confirm/svcp:
    patch:
      consumes:
      - application/json
      description: can only comfirm booking that is not comfirmed by svcp and not
        cancelled
      parameters:
      - description: booking id
        in: body
        name: bookingID
        required: true
        schema:
          $ref: '#/definitions/models.RequestBookingId'
      produces:
      - application/json
      responses:
        "200":
          description: Booking svcp completed successfully
          schema:
            $ref: '#/definitions/models.BookingBasicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: set comfirm svcp for booking by booking id
      tags:
      - Booking svcp
  /service/booking/create:
    post:
      consumes:
      - application/json
      description: User can create a booking for a service
      parameters:
      - description: service chosen
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/models.BookingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Booking created successfully
          schema:
            $ref: '#/definitions/models.BookingBasicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: User create a Booking by svcp id ,service id and timeslot id
      tags:
      - Booking user
  /service/booking/detail/svcp:
    post:
      consumes:
      - application/json
      description: get a booking detail by booking id
      parameters:
      - description: booking id
        in: body
        name: bookingID
        required: true
        schema:
          $ref: '#/definitions/models.RequestBookingId'
      produces:
      - application/json
      responses:
        "200":
          description: get detail booking
          schema:
            $ref: '#/definitions/models.BookkingDetailRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: svcp get a booking detail by booking id
      tags:
      - Booking svcp
  /service/booking/detail/user:
    post:
      consumes:
      - application/json
      description: get a booking detail by booking id
      parameters:
      - description: booking id
        in: body
        name: bookingID
        required: true
        schema:
          $ref: '#/definitions/models.RequestBookingId'
      produces:
      - application/json
      responses:
        "200":
          description: get detail booking
          schema:
            $ref: '#/definitions/models.BookkingDetailRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: user get a booking detail by booking id
      tags:
      - Booking user
  /service/booking/payment/authorize:
    post:
      consumes:
      - application/json
      description: Authorize a from a booking payment
      parameters:
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.RequestBookingId'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.Booking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Authorize a from a booking payment
      tags:
      - Service Booking Payment
  /service/booking/payment/qr:
    post:
      consumes:
      - application/json
      description: Get promptpayQr from a booking
      parameters:
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.RequestBookingId'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.PromptpayQr'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Get promptpayQr from a booking
      tags:
      - Service Booking Payment
  /service/booking/payment/refund:
    post:
      consumes:
      - application/json
      description: Refund a booking
      parameters:
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.RequestBookingId'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.BasicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "403":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Refund a booking
      tags:
      - Service Booking Payment
  /service/booking/reschedule/user:
    patch:
      consumes:
      - application/json
      description: can only reschedule not completed booking by user, not cancelled
        and timeslot is not same
      parameters:
      - description: booking id and new timeslot id
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/models.RequestBookingRescheduled'
      produces:
      - application/json
      responses:
        "200":
          description: Booking rescheduled successfully
          schema:
            $ref: '#/definitions/models.BookingBasicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: user reschedule booking by booking id and new timeslot id
      tags:
      - Booking user
  /service/create:
    post:
      consumes:
      - application/json
      description: Create a new service
      parameters:
      - description: Service data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateService'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Create a service
      tags:
      - Service
  /service/duplicate/{id}:
    post:
      consumes:
      - application/json
      description: Duplicate a service
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Service'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Duplicate a service
      tags:
      - Service
  /service/feedback/{id}:
    get:
      consumes:
      - application/json
      description: Get feedbacks for a service
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Feedback'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Get feedbacks
      tags:
      - Service
    post:
      consumes:
      - application/json
      description: Create a feedback for a service
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      - description: Feedback rating and content(optional)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateFeedbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Feedback'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Create a feedback
      tags:
      - Service
  /service/searching:
    post:
      consumes:
      - application/json
      description: Search services based on query, Address, timeslot, price range,
        rating
      parameters:
      - description: Search filter
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SearchFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Service'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Search services
      tags:
      - Service
  /serviceproviders:
    get:
      consumes:
      - application/json
      description: Get all service providers (authentication not required) and sensitive
        information is censorred
      parameters:
      - description: Page number(default 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page(default 10)
        in: query
        name: per
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SVCP'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Get all service providers
      tags:
      - ServiceProviders
    put:
      consumes:
      - application/json
      description: Update service provider (authentication required and only the service
        provider can update their own profile)
      parameters:
      - description: Service Provider Object (only the fields to be updated)
        in: body
        name: svcp
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BasicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Update service provider
      tags:
      - ServiceProviders
  /serviceproviders/{id}:
    get:
      consumes:
      - application/json
      description: Get service provider by ID (authentication not required) and sensitive
        information is censorred
      parameters:
      - description: Service Provider ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SVCP'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Get service provider by ID
      tags:
      - ServiceProviders
  /serviceproviders/add-service:
    post:
      consumes:
      - application/json
      description: Add service (authentication required and only the service provider
        can update their own profile)
      parameters:
      - description: Service Object
        in: body
        name: object
        required: true
        schema:
          properties:
            service:
              $ref: '#/definitions/models.Service'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BasicRes'
      security:
      - ApiKeyAuth: []
      summary: Add service
      tags:
      - ServiceProviders
  /serviceproviders/delete-bank-account:
    delete:
      consumes:
      - application/json
      description: Delete bank account (authentication required and only the service
        provider can update their own profile)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BasicRes'
      security:
      - ApiKeyAuth: []
      summary: Delete bank account
      tags:
      - ServiceProviders
  /serviceproviders/set-default-bank-account:
    post:
      consumes:
      - application/json
      description: Set default bank account (authentication required and only the
        service provider can update their own profile)
      parameters:
      - description: Default Bank Account Object
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/controllers.defaultBankAccountReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BasicRes'
      security:
      - ApiKeyAuth: []
      summary: Set default bank account
      tags:
      - ServiceProviders
  /serviceproviders/upload-description:
    post:
      consumes:
      - application/json
      description: Upload service provider description (authentication required and
        only the service provider can update their own profile)
      parameters:
      - description: Description Request Object
        in: body
        name: object
        required: true
        schema:
          properties:
            description:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BasicRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Upload service provider description
      tags:
      - ServiceProviders
  /serviceproviders/upload-license:
    post:
      consumes:
      - multipart/form-data
      description: Upload service provider license (authentication required)
      parameters:
      - description: License File
        in: formData
        name: license
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
              svcpEmail:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Upload service provider license
      tags:
      - ServiceProviders
  /user:
    get:
      consumes:
      - application/json
      description: Retrieve all user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of users per page
        in: query
        name: per
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Get all user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user information (authentication required)
      parameters:
      - description: User object that needs to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.BasicRes'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Update user information
      tags:
      - User
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user information by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Get user by ID
      tags:
      - User
  /user/delete-bank-account:
    delete:
      consumes:
      - application/json
      description: Delete the bank account associated with the current user
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.BasicRes'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Delete bank account
      tags:
      - User
  /user/get-search-history:
    get:
      description: Gets the search history of the current user
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.UserSearchHistory'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Get search history
      tags:
      - User
  /user/pets:
    post:
      consumes:
      - application/json
      description: Add a new pet for the user (authentication required)
      operationId: AddUserPetHandler
      parameters:
      - description: Pet object to be added
        in: body
        name: pet
        required: true
        schema:
          $ref: '#/definitions/models.CreatePet'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.BasicRes'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Add a new pet for the user
      tags:
      - Pets
  /user/pets/{id}:
    get:
      consumes:
      - application/json
      description: Get user's pets by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            properties:
              pets:
                items:
                  $ref: '#/definitions/models.Pet'
                type: array
            type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      summary: Get user's pets by user ID
      tags:
      - Pets
  /user/pets/{idx}:
    delete:
      consumes:
      - application/json
      description: Delete user's pet (authentication required)
      parameters:
      - description: Pet Index
        in: path
        name: idx
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.BasicRes'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Delete user's pet
      tags:
      - Pets
    put:
      consumes:
      - application/json
      description: Update user's pet information (authentication required)
      parameters:
      - description: Pet Index
        in: path
        name: idx
        required: true
        type: string
      - description: Pet object that needs to be updated
        in: body
        name: pet
        required: true
        schema:
          $ref: '#/definitions/models.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.BasicRes'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Update user's pet information
      tags:
      - Pets
  /user/pets/me:
    get:
      description: Get current user's pets (authentication required)
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            properties:
              pets:
                items:
                  $ref: '#/definitions/models.Pet'
                type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Get current user's pets
      tags:
      - Pets
  /user/set-default-bank-account:
    post:
      consumes:
      - application/json
      description: Set default bank account for the current user
      parameters:
      - description: Default account number
        in: body
        name: default_account_number
        required: true
        schema:
          type: string
      - description: Default bank
        in: body
        name: default_bank
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.BasicRes'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Set default bank account
      tags:
      - User
  /user/uploadProfileImage:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a profile image for the current user
      parameters:
      - description: Profile image file to upload
        in: formData
        name: profileImage
        required: true
        type: file
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.BasicRes'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.BasicErrorRes'
      security:
      - ApiKeyAuth: []
      summary: Upload profile image
      tags:
      - User
swagger: "2.0"
